#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
using namespace std;

struct link {
    string temp;
    link* next;
};

string* makeArray(int arraysize, link* link){
    string* temp = new string[arraysize];
    for (int i=0;i<arraysize;i++){
        temp[i]=link->temp;
        link=link->next;
    }
    return temp;
}

int** doubleArray(int A, int B){
    int** temp;
    temp = new int*[A];
    for (int i=0;i<A;i++){
        temp[i] = new int[B];
    }
    return temp;
}

class Social{
public:
    Social();
    Social(int numberofA, int numberofB, int** relation, int numberofRelation, string type);
    ~Social();
    void print();
    
protected:
    int nSetA, nSetB;
    string Rtype;
    bool** R;
};

void Social::print() {
    for (int i=0;i<nSetA;i++){
        for (int j=0;j<nSetB;j++){
            if (R[i][j]==true){
                cout << i+1 << Rtype << j+1 << " ";
            }
        }
    }
    cout << endl;
}

Social::Social(){
    R = NULL;
    nSetA=nSetB=0;
    Rtype="";
}

Social::Social(int numberofA, int numberofB, int** relation, int numberofRelation, string type){
    nSetA=numberofA;
    nSetB=numberofB;
    R = new bool*[numberofA];
    for (int i=0;i<numberofA;i++){
        R[i] = new bool [numberofB];
        for (int j=0;j<numberofB;j++){
            R[i][j]=false;
        }
    }
    for (int i=0;i<numberofRelation;i++){
        R[relation[i][0]-1][relation[i][1]-1]=true;
    }
    Rtype=type;
}

Social::~Social(){
    nSetA=nSetB=0;
    Rtype="";
}

Social F,W,L;

void getData(){
    //    ifstream input;
    //    bool isU = false, isC = false, isF = false, isW = false, isL = false;
    //    int valueofU = 0, valueofC = 0, valueofW = 0, valueofF = 0, valueofL = 0;
    //    string location;
    //    string temp;
    //    input.open(filename);
    //    if (input.is_open()){
    //        while (getline(input,temp)){
    //            if (temp=="#U"){
    //                isU=true;
    //                continue;
    //            }
    //            if (temp=="#C"){
    //                isC=true;
    //                continue;
    //            }
    //            if (isU){
    //                valueofU=stoi(temp);
    //                isU=false;
    //            }
    //            if (isC){
    //                valueofC=stoi(temp);
    //                isC=false;
    //            }
    //        }
    //      }
    //      input.close();
    //      input.open(filename);
    //      if (input.is_open()){
    //        while (getline(input,temp)){
    //            if (temp=="#F"){
    //                isF=true;
    //                continue;
    //            }
    //            if (temp=="#W"){
    //                isF=false;
    //                isW=true;
    //                continue;
    //            }
    //            if (temp=="#L"){
    //                isW=false;
    //                isL=true;
    //                continue;
    //            }
    //            if (isF){
    //                valueofF++;
    //            }
    //            if (isW){
    //                valueofW++;
    //            }
    //            if (isL){
    //                valueofL++;
    //            }
    //        }
    //    }
    //    isL=false;
    //    input.close();
    //    input.open(filename);
    //
    //    int** FP = doubleArray(valueofF, 2);
    //    int** WP = doubleArray(valueofW, 2);
    //    int** LP = doubleArray(valueofL, 2);
    //    string tempnumber="";
    //    char position[20];
    //    int index = 0;
    //    int indexline = 0;
    //    if (input.is_open()){
    //        while (input.getline(position,20)){
    //            index=0;
    //            tempnumber="";
    //            if (position[1]=='F'){
    //                indexline=0;
    //                isF=true;
    //                continue;
    //            }
    //            if (position[1]=='W'){
    //                indexline=0;
    //                isF=false;
    //                isW=true;
    //                continue;
    //            }
    //            if (position[1]=='L'){
    //                indexline=0;
    //                isW=false;
    //                isL=true;
    //                continue;
    //            }
    //            if (isF){
    //                for (int i=0;position[i]!=' ';i++){
    //                    tempnumber+=position[index];
    //                    index=i;
    //                }
    //                FP[indexline][0]=stoi(tempnumber);
    //                index++;
    //                tempnumber="";
    //                for (int i=index;position[i]!='\0';i++){
    //                    tempnumber+=position[index];
    //                    index++;
    //                }
    //                FP[indexline][1]=stoi(tempnumber);
    //                indexline++;
    //            }
    //            if (isW){
    //                for (int i=0;position[i]!=' ';i++){
    //                    tempnumber+=position[index];
    //                    index=i;
    //                }
    //                WP[indexline][0]=stoi(tempnumber);
    //                index++;
    //                tempnumber="";
    //                for (int i=index;position[i]!='\0';i++){
    //                    tempnumber+=position[index];
    //                    index++;
    //                }
    //                WP[indexline][1]=stoi(tempnumber);
    //                indexline++;
    //            }
    //            if (isL){
    //                for (int i=0;position[i]!=' ';i++){
    //                    tempnumber+=position[index];
    //                    index=i;
    //                }
    //                LP[indexline][0]=stoi(tempnumber);
    //                index++;
    //                tempnumber="";
    //                for (int i=index;position[i]!='\0';i++){
    //                    tempnumber+=position[index];
    //                    index++;
    //                }
    //                LP[indexline][1]=stoi(tempnumber);
    //                indexline++;
    //            }
    //        }
    //    }
    //    input.close();
    //
    //    F = Social(valueofU,valueofU,FP,valueofF,"F");
    //    W = Social(valueofU,valueofC,WP,valueofW,"W");
    //    L = Social(valueofU,valueofC,LP,valueofL,"L");
    //
    //    for (int i=0;i<valueofF;i++){
    //        delete [] FP[i];
    //    }
    //    delete [] FP;
    //    for (int i=0;i<valueofW;i++){
    //        delete [] WP[i];
    //    }
    //    delete [] WP;
    //    for (int i=0;i<valueofL;i++){
    //        delete [] LP[i];
    //    }
    //    delete [] LP;
    //
    int valueofU = 0, valueofC = 0, valueofF = 0, valueofW = 0, valueofL = 0;
    link* FLink = new link;
    link* head;
    head=FLink;
    string temp;
    getline(cin,temp);
    getline(cin,temp);
    valueofU=stoi(temp);
    getline(cin,temp);
    getline(cin,temp);
    valueofC=stoi(temp);
    getline(cin,temp);
    int index=0, middle=0;
    char convert[20];
    string tempnumber;
    getline(cin,temp);
    while (temp!="#W"){
        index++;
        FLink->temp=temp;
        getline(cin,temp);
        if (temp!="#W"){
            FLink->next=new link;
            FLink=FLink->next;
        } else {
            FLink->next=NULL;
        }
    }
    FLink=head;
    valueofF=index;
    string* Farray=makeArray(valueofF,FLink);
    int** FP = doubleArray(valueofF, 2);
    for (int i=0;i<valueofF;i++){
        tempnumber="";
        strcpy(convert, Farray[i].c_str());
        for (int j=0;convert[j]!=' ';j++){
            tempnumber+=convert[j];
            middle=j+1;
        }
        FP[i][0]=stoi(tempnumber);
        tempnumber="";
        for (int j=middle+1;convert[j]!='\0';j++){
            tempnumber+=convert[j];
        }
        FP[i][1]=stoi(tempnumber);
    }
    link* WLink = new link;
    head=WLink;
    index=0;
    getline(cin,temp);
    while (temp!="#L"){
        index++;
        WLink->temp=temp;
        getline(cin,temp);
        if (temp!="#L"){
            WLink->next=new link;
            WLink=WLink->next;
        } else {
            WLink->next=NULL;
        }
    }
    WLink=head;
    valueofW=index;
    string* Warray=makeArray(valueofW,WLink);
    int** WP = doubleArray(valueofW, 2);
    for (int i=0;i<valueofW;i++){
        tempnumber="";
        strcpy(convert, Warray[i].c_str());
        for (int j=0;convert[j]!=' ';j++){
            tempnumber+=convert[j];
            middle=j+1;
        }
        WP[i][0]=stoi(tempnumber);
        tempnumber="";
        for (int j=middle+1;convert[j]!='\0';j++){
            tempnumber+=convert[j];
        }
        WP[i][1]=stoi(tempnumber);
    }
    link* LLink = new link;
    head=LLink;
    index=0;
    while (getline(cin,temp)){
        index++;
        LLink->temp=temp;
        if (cin){
            LLink->next=new link;
            LLink=LLink->next;
        } else {
            LLink->next=NULL;
        }
    }
    LLink=head;
    valueofL=index;
    string* Larray=makeArray(valueofL,LLink);
    int** LP = doubleArray(valueofL, 2);
    for (int i=0;i<valueofL;i++){
        tempnumber="";
        strcpy(convert, Larray[i].c_str());
        for (int j=0;convert[j]!=' ';j++){
            tempnumber+=convert[j];
            middle=j+1;
        }
        LP[i][0]=stoi(tempnumber);
        tempnumber="";
        for (int j=middle+1;convert[j]!='\0';j++){
            tempnumber+=convert[j];
        }
        LP[i][1]=stoi(tempnumber);
    }
    F = Social(valueofU,valueofU,FP,valueofF,"F");
    W = Social(valueofU,valueofC,WP,valueofW,"W");
    L = Social(valueofU,valueofC,LP,valueofL,"L");
    for (int i=0;i<valueofF;i++){
        delete [] FP[i];
    }
    delete [] FP;
    for (int i=0;i<valueofW;i++){
        delete [] WP[i];
    }
    delete [] WP;
    for (int i=0;i<valueofL;i++){
        delete [] LP[i];
    }
    delete [] LP;
    while (FLink) {
        link* curr = FLink;
        FLink=FLink->next;
        delete curr;
    }
    while (WLink) {
        link* curr = WLink;
        WLink=WLink->next;
        delete curr;
    }
    while (LLink) {
        link* curr = LLink;
        LLink=LLink->next;
        delete curr;
    }
    delete head;
}

int main (){
    getData();
    F.print();
    W.print();
    L.print();
    cout << endl;
    return 0;
}
