#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <limits.h>
using namespace std;

struct link {
    string temp;
    link* next;
};

string* makeArray(int arraysize, link* link){
    string* temp = new string[arraysize];
    for (int i=0;i<arraysize;i++){
        temp[i]=link->temp;
        link=link->next;
    }
    return temp;
}

int** doubleArray(int A, int B){
    int** temp;
    temp = new int*[A];
    for (int i=0;i<A;i++){
        temp[i] = new int[B];
    }
    return temp;
}

class Tuple {
public:
    bool isEmpty() const;
    bool isError() const;
    int  size() const;
    Tuple project(const int numItems, const int items[]) const;
    int  operator()(const int item) const;
    void operator=(const Tuple& t);
    bool operator==(const Tuple& t) const;
    Tuple operator+(const Tuple& t) const;
    Tuple();
    Tuple(const int t);
    Tuple(const Tuple& t);
    Tuple(const int numItems, const int data[]);
    ~Tuple();
    int  _numItems;
    int* _pData;
    
protected:
    friend std::ostream& operator<<(std::ostream& os, const Tuple& t);
    static const int normalTupleSize = 16;
    int  _data[normalTupleSize];
};

const Tuple errorTuple(-1,0);
#define TUPLE_ERROR INT_MIN

bool Tuple::isEmpty() const {
    if (_numItems == 0)
        return true;
    return false;
}

bool Tuple::isError() const {
    if (_numItems == -1)
        return true;
    return false;
}

int Tuple::size() const {
    if (_numItems == -1)
        return TUPLE_ERROR;
    return _numItems;
}

Tuple Tuple::project(const int numItems, const int items[]) const {
    if (numItems < 0)
        return (Tuple)errorTuple;
    
    int data[numItems];
    for (int i = 0; i < numItems; ++i) {
        if (items[i] < 1 || items[i] > _numItems)
            return (Tuple)errorTuple;
        data[i] = _pData[items[i]-1];
    }
    Tuple t(numItems,data);
    return t;
}

int Tuple::operator()(const int item) const {
    if (item < 1 || item > _numItems)
        return TUPLE_ERROR;
    return _pData[item-1];
    return 0;
}

void Tuple::operator=(const Tuple& t) {
    
    if (t._numItems < 0) {
        _numItems = -1;
        if (_pData != _data)
            delete [] _pData;
        return;
    }
    
    _numItems = t._numItems;
    for (int i = 0; i < _numItems; ++i)
        _pData[i] = t._pData[i];
}

bool Tuple::operator==(const Tuple& t) const{
    if (_numItems < 0 || t._numItems < 0)
        return false;
    
    if (_numItems != t._numItems)
        return false;
    
    for (int i = 0; i < _numItems; ++i)
        if (_pData[i] != t._pData[i])
            return false;
    
    return true;
}

Tuple Tuple::operator+(const Tuple& t) const {
    if (t._numItems < 0)
        return (Tuple)errorTuple;
    
    int data[_numItems + t._numItems];
    for (int i = 0; i < _numItems; ++i) {
        data[i] = _pData[i];
    }
    for (int i = 0; i < t._numItems; ++i) {
        data[_numItems+i] = t._pData[i];
    }
    
    Tuple* cat = new Tuple((_numItems + t._numItems),data);
    return *cat;
}

Tuple::Tuple() {
    _numItems = 0;
    _pData = _data;
}

Tuple::Tuple(const int t) {
    _numItems = 1;
    _pData = _data;
    _pData[0] = t;
}

Tuple::Tuple(const Tuple& t) : Tuple(t._numItems, t._pData) {}   // Req's C++11

Tuple::Tuple(const int numItems, const int data[]) {
    if (numItems < 0) {
        _numItems = -1;
        _pData = _data;
        return;
    }
    _numItems = numItems;
    if (_numItems > normalTupleSize) {
    }
    else {
        _pData = _data;
    }
    for (int i = 0; i < _numItems; ++i)
        _pData[i] = data[i];
}

Tuple::~Tuple() {
    if (_pData != _data)
        delete [] _pData;
    _numItems = -2;
}


std::ostream& operator<<(std::ostream& os, const Tuple& t) {
    if (t._numItems == 0) {
        os << "<>";
        return os;
    }
    else if (t._numItems > 0) {
        os << t._pData[0];
        for (int i = 1; i < t._numItems; ++i)
            os << "," << t._pData[i];
        return os;
    }
    else if (t._numItems == -1) {
        os << "<ERROR TUPLE>";
        return os;
    }
    else {
        std::cerr << "Error: Attempted to output deleted tuple; exiting";
        exit(-1);
    }
}

class Set {
public:
    bool isEmpty() const;
    bool isError() const;
   
    int  cardinality() const;
    Set operator()(const int item) const;
    void operator=(const Set& s);
    Set();
    Set(const Set& s);
    Set(const int numElements, const int data[]);
    Set(const int numElements, const Tuple Tuples[]);
    ~Set();
    int    _numElements;
    int    _tupleArraySize;
    Tuple* _pTuples;
    
protected:
    friend std::ostream& operator<<(std::ostream& os, const Set& s);
};

const Set emptySet(0,(int*)0);
const Set errorSet(-1,(int*)0);

bool Set::isEmpty() const {
    return _numElements == 0;
}

bool Set::isError() const {
    bool isRepeat = false;
    if (_numElements<0){
        isRepeat=true;
    } else {
        for (int i=0;i<_numElements-1;i++){
            for (int j=i+1;j<_numElements;j++){
                if (_pTuples[i]==_pTuples[j]){
                    isRepeat = true;
                }
            }
        }
    }
    return isRepeat;
}

int Set::cardinality() const {
    if (this->isError()==true){
        return -1;
    }
    return _numElements;
}

void Set::operator=(const Set& s) {
    _numElements = s._numElements;
    if (_numElements>0){
        _pTuples = new Tuple[_numElements];
        for (int i=0;i<_numElements;i++){
            _pTuples[i]=s._pTuples[i];
        }
    }
}

Set Set::operator()(const int item) const {
    if (item>_numElements || item<=0 || this->isError()==true) {
        return errorSet;
    }
    Tuple* copyTuple = new Tuple;
    copyTuple[0] = _pTuples[item-1];
    Set copy(1,copyTuple);
    return copy;
}

Set::Set() {
    _pTuples = NULL;
    _numElements = 0;
}

Set::Set(const Set& s) {
    _numElements = s._numElements;
    if (_numElements>0){
        _pTuples = new Tuple[_numElements];
        for (int i=0;i<_numElements;i++){
            _pTuples[i]=s._pTuples[i];
        }
    }
}

Set::Set(const int numElements, const int data[]) {
    if (numElements<0){
        _numElements=-1;
    } else if (data==NULL){
        _numElements=0;
    } else {
        _numElements=numElements;
        if (numElements>0) {
            Tuple* temp = new Tuple[numElements];
            for (int i=0;i<numElements;i++){
                temp[i] = data[i];
            }
            for (int i=0;i<numElements-1;i++){
                if (temp[i].size()==1){
                    for (int j=i+1;j<numElements;j++){
                        if (temp[i]==temp[j]){
                            temp[j]=temp[j]+0;
                        }
                    }
                }
            }
            int realsize = 0;
            Tuple* realTuples = new Tuple[numElements];
            for (int i=0;i<numElements;i++){
                if(temp[i].size()==1){
                    realTuples[realsize]=temp[i];
                    realsize++;
                }
            }
            _numElements=realsize;
            _pTuples = new Tuple[realsize];
            for (int i=0;i<realsize;i++){
                _pTuples[i]=realTuples[i];
            }
        }
    }
}

Set::Set(const int numElements, const Tuple tuples[]) {
    if (numElements<0){
        _numElements=-1;
    } else if (tuples==NULL){
        _numElements=0;
    } else {
        _numElements = numElements;
        if (numElements>0) {
            Tuple* temp = new Tuple[numElements];
            int* sizeoftuple = new int[numElements];
            for (int i=0;i<numElements;i++){
                temp[i] = tuples[i];
                sizeoftuple[i] = tuples[i].size();
            }
            for (int i=0;i<numElements-1;i++){
                if (temp[i].size()==sizeoftuple[i]){
                    for (int j=i+1;j<numElements;j++){
                        if (temp[i]==temp[j]){
                            temp[j]=temp[j]+0;
                        }
                    }
                }
            }
            int realsize = 0;
            Tuple* realTuples = new Tuple[numElements];
            for (int i=0;i<numElements;i++){
                if(temp[i].size()==sizeoftuple[i]){
                    realTuples[realsize]=temp[i];
                    realsize++;
                }
            }
            _numElements=realsize;
            _pTuples = new Tuple[realsize];
            for (int i=0;i<realsize;i++){
                _pTuples[i]=realTuples[i];
            }
        }
    }
}

Set::~Set() {
    if (_numElements>0){
        delete [] _pTuples;
    }
    _numElements=0;
}

std::ostream& operator<<(std::ostream& os, const Set& s) {
    if (s.isError()){
        os << "{ERROR SET}";
        return os;
    } else {
        if (s.isEmpty()) {
            os << "{}";
            return os;
        } else {
            os << "{" << s._pTuples[0];
            for (int i = 1; i < s._numElements; ++i)
                os << "," << s._pTuples[i];
            os << "}";
            return os;
        }
    }
}

int NumberofU;

class Social{
public:
    Social();
    Social(int numberofAandB);
    Social(const Social &s);
    Social(int numberofA, int numberofB, int** relation, int numberofRelation);
    ~Social();
    Social RE();
    Social RS();
    Social Composition(Social& s);
    Social Inverse();
    Social Square();
    Social operator+(const Social &s);
    Social operator-(const Social &s);
    void operator=(const Social &s);
    void print();
    int nSetA, nSetB;
    bool** R;
};

Social Social::RE(){
    Social temp;
    temp.nSetA=nSetA;
    temp.nSetB=nSetB;
    temp.R = R;
    for (int i=0;i<temp.nSetA;i++){
        if (i<NumberofU){
            temp.R[i][i]=true;
        }
    }
    return temp;
}

Social Social::RS(){
    Social temp;
    temp.nSetA=nSetA;
    temp.nSetB=nSetB;
    temp.R = R;
    for (int i=0;i<temp.nSetA;i++){
        for (int j=0;j<nSetB;j++){
            if (R[i][j]==true){
                temp.R[j][i]=true;
            }
        }
    }
    return temp;
}

Social Social::Composition(Social& s){
    Social temp;
    temp.nSetA=nSetA;
    temp.nSetB=nSetB;
    temp.R = new bool*[nSetA];
    for (int i=0;i<temp.nSetA;i++){
        temp.R[i] = new bool[temp.nSetB];
        for (int j=0;j<temp.nSetB;j++){
            temp.R[i][j]=false;
        }
    }
    for (int i=0;i<temp.nSetA;i++){
        for (int j=0;j<temp.nSetB;j++){
            if (s.R[i][j]==true){
                for (int z=0;z<nSetB;z++){
                    if (R[j][z]==true){
                        temp.R[i][z]=true;
                    }
                }
            }
        }
    }
    return temp;
}

Social Social::Inverse(){
    Social temp;
    temp.nSetA=nSetA;
    temp.nSetB=nSetB;
    temp.R = new bool*[nSetA];
    for (int i=0;i<temp.nSetA;i++){
        temp.R[i] = new bool[temp.nSetB];
        for (int j=0;j<temp.nSetB;j++){
            temp.R[i][j]=false;
        }
    }
    for (int i=0;i<temp.nSetA;i++){
        for (int j=0;j<temp.nSetB;j++){
            if (R[i][j]==true){
                temp.R[j][i]=true;
            }
        }
    }
    return temp;
}

Social Social::Square(){
    Social temp;
    temp.nSetA=nSetA;
    temp.nSetB=nSetB;
    temp.R = R;
    for (int i=0;i<temp.nSetA;i++){
        for (int j=0;j<temp.nSetB;j++){
            temp.R[j][i]=true;
        }
    }
    return temp;
}

Social Social::operator+(const Social &s){
    Social temp;
    temp.nSetA=nSetA;
    temp.nSetB=nSetB;
    temp.R = new bool*[nSetA];
    for (int i=0;i<temp.nSetA;i++){
        temp.R[i] = new bool[temp.nSetB];
        for (int j=0;j<temp.nSetB;j++){
            if (s.R[i][j]==true||R[i][j]==true){
                temp.R[i][j]=true;
            }
        }
    }
    return temp;
}

Social Social::operator-(const Social &s){
    Social temp;
    temp.nSetA=nSetA;
    temp.nSetB=nSetB;
    temp.R = R;
    for (int i=0;i<temp.nSetA;i++){
        for (int j=0;j<temp.nSetB;j++){
            if (s.R[i][j]){
                temp.R[i][j]=false;
            }
        }
    }
    return temp;
}

void Social::operator=(const Social &s){
    nSetA=s.nSetA;
    nSetB=s.nSetB;
    R = new bool*[nSetA];
    for (int i=0;i<nSetA;i++){
        R[i] = new bool [nSetB];
        for (int j=0;j<nSetB;j++){
            R[i][j]=s.R[i][j];
        }
    }
}

void Social::print() {
    for (int i=0;i<nSetA;i++){
        for (int j=0;j<nSetB;j++){
            if (R[i][j]==true){
                cout << "{" << i+1 << "," << j+1 << "} ";
            }
        }
    }
    cout << endl;
}

Social::Social(){
    R = NULL;
    nSetA=nSetB=0;
}

Social::Social(int numberofAandB){
    nSetA=nSetB=numberofAandB;
    R = new bool* [nSetA];
    for (int i=0;i<nSetA;i++){
        R[i] = new bool [nSetB];
        for (int j=0;j<nSetB;j++){
            R[i][j]=false;
        }
    }
}

Social::Social(const Social &s){
    nSetA=s.nSetA;
    nSetB=s.nSetB;
    R = new bool*[nSetA];
    for (int i=0;i<nSetA;i++){
        R[i] = new bool [nSetB];
        for (int j=0;j<nSetB;j++){
            R[i][j]=s.R[i][j];
        }
    }
}

Social::Social(int numberofA, int numberofB, int** relation, int numberofRelation){
    nSetA=numberofA;
    nSetB=numberofB;
    R = new bool*[numberofA];
    for (int i=0;i<numberofA;i++){
        R[i] = new bool [numberofB];
        for (int j=0;j<numberofB;j++){
            R[i][j]=false;
        }
    }
    for (int i=0;i<numberofRelation;i++){
        R[relation[i][0]-1][relation[i][1]-1]=true;
    }
}

Social::~Social(){
    nSetA=nSetB=0;
}

Social F,W,L,U;

void getData(string filename){
//    ifstream input;
//    bool isU = false, isC = false, isF = false, isW = false, isL = false;
//    int valueofU = 0, valueofC = 0, valueofW = 0, valueofF = 0, valueofL = 0;
//    string location;
//    string temp;
//    input.open(filename);
//    if (input.is_open()){
//        while (getline(input,temp)){
//            if (temp=="#U"){
//                isU=true;
//                continue;
//            }
//            if (temp=="#C"){
//                isC=true;
//                continue;
//            }
//            if (isU){
//                valueofU=stoi(temp);
//                isU=false;
//            }
//            if (isC){
//                valueofC=stoi(temp);
//                isC=false;
//            }
//        }
//      }
//      input.close();
//      input.open(filename);
//      if (input.is_open()){
//        while (getline(input,temp)){
//            if (temp=="#F"){
//                isF=true;
//                continue;
//            }
//            if (temp=="#W"){
//                isF=false;
//                isW=true;
//                continue;
//            }
//            if (temp=="#L"){
//                isW=false;
//                isL=true;
//                continue;
//            }
//            if (isF){
//                valueofF++;
//            }
//            if (isW){
//                valueofW++;
//            }
//            if (isL){
//                valueofL++;
//            }
//        }
//    }
//    isL=false;
//    input.close();
//
//    Social UT = Social(valueofU);
//    U=UT;
//    NumberofU=valueofU;
//
//    input.open(filename);
//
//    int** FP = doubleArray(valueofF, 2);
//    int** WP = doubleArray(valueofW, 2);
//    int** LP = doubleArray(valueofL, 2);
//
//    string tempnumber="";
//    char position[20];
//    int index = 0;
//    int indexline = 0;
//    if (input.is_open()){
//        while (input.getline(position,20)){
//            index=0;
//            tempnumber="";
//            if (position[1]=='F'){
//                indexline=0;
//                isF=true;
//                continue;
//            }
//            if (position[1]=='W'){
//                indexline=0;
//                isF=false;
//                isW=true;
//                continue;
//            }
//            if (position[1]=='L'){
//                indexline=0;
//                isW=false;
//                isL=true;
//                continue;
//            }
//            if (isF){
//                for (int i=0;position[i]!=' ';i++){
//                    tempnumber+=position[index];
//                    index=i;
//                }
//                FP[indexline][0]=stoi(tempnumber);
//                index++;
//                tempnumber="";
//                for (int i=index;position[i]!='\0';i++){
//                    tempnumber+=position[index];
//                    index++;
//                }
//                FP[indexline][1]=stoi(tempnumber);
//                indexline++;
//            }
//            if (isW){
//                for (int i=0;position[i]!=' ';i++){
//                    tempnumber+=position[index];
//                    index=i;
//                }
//                WP[indexline][0]=stoi(tempnumber);
//                index++;
//                tempnumber="";
//                for (int i=index;position[i]!='\0';i++){
//                    tempnumber+=position[index];
//                    index++;
//                }
//                WP[indexline][1]=stoi(tempnumber);
//                indexline++;
//            }
//            if (isL){
//                for (int i=0;position[i]!=' ';i++){
//                    tempnumber+=position[index];
//                    index=i;
//                }
//                LP[indexline][0]=stoi(tempnumber);
//                index++;
//                tempnumber="";
//                for (int i=index;position[i]!='\0';i++){
//                    tempnumber+=position[index];
//                    index++;
//                }
//                LP[indexline][1]=stoi(tempnumber);
//                indexline++;
//            }
//        }
//    }
//    input.close();
//
//    if (valueofU>=valueofC){
//        valueofC=valueofU;
//    } else {
//        valueofU=valueofC;
//    }
//    Social FT = Social(valueofU,valueofU,FP,valueofF);
//    Social WT = Social(valueofU,valueofC,WP,valueofW);
//    Social LT = Social(valueofU,valueofC,LP,valueofL);
//
//    F=FT;
//    W=WT;
//    L=LT;
    
    int valueofU = 0, valueofC = 0, valueofF = 0, valueofW = 0, valueofL = 0;
    link* FLink = new link;
    link* head;
    head=FLink;
    string temp;
    getline(cin,temp);
    getline(cin,temp);
    valueofU=stoi(temp);
    Social UT = Social(valueofU);
    U=UT;
    NumberofU=valueofU;
    getline(cin,temp);
    getline(cin,temp);
    valueofC=stoi(temp);
    getline(cin,temp);
    int index=0, middle=0;
    char convert[20];
    string tempnumber;
    getline(cin,temp);
    while (temp!="#W"){
        index++;
        FLink->temp=temp;
        getline(cin,temp);
        if (temp!="#W"){
            FLink->next=new link;
            FLink=FLink->next;
        } else {
            FLink->next=NULL;
        }
    }
    FLink=head;
    valueofF=index;
    string* Farray=makeArray(valueofF,FLink);
    int** FP = doubleArray(valueofF, 2);
    for (int i=0;i<valueofF;i++){
        tempnumber="";
        strcpy(convert, Farray[i].c_str());
        for (int j=0;convert[j]!=' ';j++){
            tempnumber+=convert[j];
            middle=j+1;
        }
        FP[i][0]=stoi(tempnumber);
        tempnumber="";
        for (int j=middle+1;convert[j]!='\0';j++){
            tempnumber+=convert[j];
        }
        FP[i][1]=stoi(tempnumber);
    }
    link* WLink = new link;
    head=WLink;
    index=0;
    getline(cin,temp);
    while (temp!="#L"){
        index++;
        WLink->temp=temp;
        getline(cin,temp);
        if (temp!="#L"){
            WLink->next=new link;
            WLink=WLink->next;
        } else {
            WLink->next=NULL;
        }
    }
    WLink=head;
    valueofW=index;
    string* Warray=makeArray(valueofW,WLink);
    int** WP = doubleArray(valueofW, 2);
    for (int i=0;i<valueofW;i++){
        tempnumber="";
        strcpy(convert, Warray[i].c_str());
        for (int j=0;convert[j]!=' ';j++){
            tempnumber+=convert[j];
            middle=j+1;
        }
        WP[i][0]=stoi(tempnumber);
        tempnumber="";
        for (int j=middle+1;convert[j]!='\0';j++){
            tempnumber+=convert[j];
        }
        WP[i][1]=stoi(tempnumber);
    }
    link* LLink = new link;
    head=LLink;
    index=0;
    while (getline(cin,temp)){
        index++;
        LLink->temp=temp;
        if (cin){
            LLink->next=new link;
            LLink=LLink->next;
        } else {
            LLink->next=NULL;
        }
    }
    LLink=head;
    valueofL=index;
    string* Larray=makeArray(valueofL,LLink);
    int** LP = doubleArray(valueofL, 2);
    for (int i=0;i<valueofL;i++){
        tempnumber="";
        strcpy(convert, Larray[i].c_str());
        for (int j=0;convert[j]!=' ';j++){
            tempnumber+=convert[j];
            middle=j+1;
        }
        LP[i][0]=stoi(tempnumber);
        tempnumber="";
        for (int j=middle+1;convert[j]!='\0';j++){
            tempnumber+=convert[j];
        }
        LP[i][1]=stoi(tempnumber);
    }
    if (valueofU>=valueofC){
        valueofC=valueofU;
    } else {
        valueofU=valueofC;
    }
    Social FT = Social(valueofU,valueofU,FP,valueofF);
    Social WT = Social(valueofU,valueofC,WP,valueofW);
    Social LT = Social(valueofU,valueofC,LP,valueofL);

    F=FT;
    W=WT;
    L=LT;
}

int** makeBinary(){
    int numberofPowerset, temp;
    numberofPowerset=pow(2,NumberofU);
    int** BV = new int* [numberofPowerset];
    for (int i=0;i<numberofPowerset;i++){
        temp=i;
        BV[i] = new int [NumberofU];
        for (int j=NumberofU-1;j>=0;j--){
            BV[i][j]=temp%2;
            temp/=2;
        }
    }
    return BV;
}

int** makePowerSet(){
    int numberofPowerset;
    int** BV = makeBinary();
    numberofPowerset=pow(2,NumberofU);
    int** powerSet = new int* [numberofPowerset];
    for (int i=0;i<numberofPowerset;i++){
        powerSet[i] = new int [NumberofU];
        for (int j=0;j<NumberofU;j++){
            if (BV[i][j]==1){
                powerSet[i][j]=j+1;
            } else {
                powerSet[i][j]=0;
            }
        }
    }
    return powerSet;
}

void Result(Social D){
    int numberofPowerset;
    numberofPowerset=pow(2,NumberofU);
    int** PowerSet = makePowerSet();
    
    int numberofRelation=0;
    for (int i=0;i<D.nSetA;i++){
        for (int j=0;j<D.nSetB;j++){
            if (D.R[i][j]==true){
                numberofRelation++;
            }
        }
    }
    int** DArray = doubleArray(numberofRelation, 2);
    int index=0;
    for (int i=0;i<D.nSetA;i++){
        for (int j=0;j<D.nSetB;j++){
            if (D.R[i][j]==true){
                DArray[index][0]=i+1;
                DArray[index][1]=j+1;
                index++;
            }
        }
    }
    
    Tuple Delement[numberofPowerset];
    index=0;
    for (int i=0;i<numberofPowerset;i++){
        for (int j=0;j<NumberofU;j++){
            if (PowerSet[i][j]!=0){
                Delement[index]=Delement[index]+PowerSet[i][j];
            }
        }
        index++;
    }
    
    Set DSet = Set(numberofPowerset,Delement);
    
    Tuple** Dpair = new Tuple*[numberofPowerset*numberofPowerset];
    for (int i=0;i<numberofPowerset*numberofPowerset;i++){
        Dpair[i] = new Tuple[3];
    }
    
    index=0;
    for (int i=0;i<numberofPowerset;i++){
        for (int j=0;j<numberofPowerset;j++){
            Dpair[index][0]=DSet._pTuples[i];
            Dpair[index][1]=DSet._pTuples[j];
            Dpair[index][2]=1;
            index++;
        }
    }
    
    bool TFA;
    
    for (int i=0;i<numberofPowerset*numberofPowerset;i++){
        TFA=false;
        for (int j=0;j<Dpair[i][0]._numItems;j++){
            for (int z=0;z<Dpair[i][1]._numItems;z++){
                for (int h=0;h<numberofRelation;h++){
                    if (Dpair[i][0]._pData[j]==DArray[h][0]&&Dpair[i][1]._pData[z]==DArray[h][1]){
                        TFA=true;
                        break;
                    } else {
                        TFA=false;
                    }
                }
                if (TFA==false){
                    Dpair[i][2]=0;
                }
            }
        }
        if (Dpair[i][0]._numItems==0||Dpair[i][1]._numItems==0){
            Dpair[i][2]=0;
        }
    }
    
    for (int i=0;i<numberofPowerset*numberofPowerset;i++){
        if (Dpair[i][2]==1){
            cout << "{" << Dpair[i][0] << "} {" << Dpair[i][1] << "}" << endl;
        }
    }
}

int main (){
    
    getData("input.txt");

    Social Fr;
    Fr = F.RE();
    Social Frs;
    Frs = Fr.RS();
    Social Lfw;
    Lfw = L+(W.Composition(Frs));
    Social Win;
    Win = W.Inverse();
    Social S;
    S = Win.Composition(Lfw);
    Social Us;
    Us = U.Square();
    Social D;
    D = Us-S;
    
//    cout << "F: ";
//    F.print();
//    cout << "W: ";
//    W.print();
//    cout << "L: ";
//    L.print();
//    cout << endl;
//    cout << "Fr: ";
//    Fr.print();
//    cout << "Frs: ";
//    Frs.print();
//    cout << "W.Composition(Frs): ";
//    W.Composition(Frs).print();
//    cout << "Lfw: ";
//    Lfw.print();
//    cout << "Win: ";
//    Win.print();
//    cout << "S: ";
//    S.print();
//    cout << endl;
//    cout << "D: ";
//    D.print();
//    cout << endl;
    
    Result(D);
    
    cout << endl;
    return 0;
}
